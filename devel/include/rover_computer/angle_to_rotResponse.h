// Generated by gencpp from file rover_computer/angle_to_rotResponse.msg
// DO NOT EDIT!


#ifndef ROVER_COMPUTER_MESSAGE_ANGLE_TO_ROTRESPONSE_H
#define ROVER_COMPUTER_MESSAGE_ANGLE_TO_ROTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_computer
{
template <class ContainerAllocator>
struct angle_to_rotResponse_
{
  typedef angle_to_rotResponse_<ContainerAllocator> Type;

  angle_to_rotResponse_()
    : angle(0.0)  {
    }
  angle_to_rotResponse_(const ContainerAllocator& _alloc)
    : angle(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> const> ConstPtr;

}; // struct angle_to_rotResponse_

typedef ::rover_computer::angle_to_rotResponse_<std::allocator<void> > angle_to_rotResponse;

typedef boost::shared_ptr< ::rover_computer::angle_to_rotResponse > angle_to_rotResponsePtr;
typedef boost::shared_ptr< ::rover_computer::angle_to_rotResponse const> angle_to_rotResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_computer::angle_to_rotResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_computer::angle_to_rotResponse_<ContainerAllocator1> & lhs, const ::rover_computer::angle_to_rotResponse_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_computer::angle_to_rotResponse_<ContainerAllocator1> & lhs, const ::rover_computer::angle_to_rotResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_computer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4edb55038e2b888976a0c0c56935341c";
  }

  static const char* value(const ::rover_computer::angle_to_rotResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4edb55038e2b8889ULL;
  static const uint64_t static_value2 = 0x76a0c0c56935341cULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_computer/angle_to_rotResponse";
  }

  static const char* value(const ::rover_computer::angle_to_rotResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angle\n"
"\n"
;
  }

  static const char* value(const ::rover_computer::angle_to_rotResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angle_to_rotResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_computer::angle_to_rotResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_computer::angle_to_rotResponse_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_COMPUTER_MESSAGE_ANGLE_TO_ROTRESPONSE_H
